# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
export ZSH_THEME="powerlevel10k/powerlevel10k"
# IF powerlevel10k installed somewhere else
# source ~/powerlevel10k/powerlevel10k.zsh-theme

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	docker
    osx
    sudo
    encode64
    jsontools
    alias-finder
    github
    docker-compose
    ssh-agent
    zsh_reload
    systemadmin
    web-search
    # zsh-syntax-highlighting
    # npm
    # brew
    # autojump
    # keychain
    # blackbox
)

ZSH_DISABLE_COMPFIX=true 
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   # export EDITOR='mvim'
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

###
# History
###
export HISTFILE=~/.zsh_history
export HISTFILESIZE=1000000000
export HISTSIZE=$HISTFILESIZE
export SAVEHIST=$HISTSIZE
# Immediate append to history
setopt INC_APPEND_HISTORY
export HISTTIMEFORMAT="[%F %T] "
# Add timestamp to history
setopt EXTENDED_HISTORY
# No duplicates
setopt HIST_IGNORE_ALL_DUPS


# If you have a config file somewhere else
# source $HOME/dev/configs/config

#####
# ENV VAR
#####
export ZSHF=$HOME/.zshrc
export VIMF=$HOME/.vim_runtime/my_configs.vim
export EMAIL=$(git config user.email)
export DEV_PATH=$HOME/dev
# For Homebrew
export PATH="/usr/local/sbin:$PATH"
# Local bin
export PATH=$HOME/bin:$PATH


# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
else
   # export EDITOR='mvim'
   export EDITOR='vim'
fi

#####
# FZF
#####
# SET default fzf command to ripgrep
# export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git'"
#
# Print each file that would be searched and follow symbolic links and glob pattern do not
# search in node_modules and .git and pipe to fzf
# export FZF_DEFAULT_COMMAND='rg --files --hidden --follow -g "!{node_modules,.git}" | fzf'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow -g "!{node_modules,.git}"'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# If you dont want to ignore vcs files
# export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --no-ignore-vcs'
# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# If fzf.zsh, load
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

###
# Alias
###

# Alias vim ~/.vimrc
alias vv="vim $VIMF"

# Alias vim ~/.zshrc
alias vz="vim $ZSHF"

# Alias ISO timestamp
alias getiso='date +"%Y-%m-%dT%H:%M:%S%z"'

# Function to safely append to file with iso time
append(){
    prefix="\n\n\n/*\n$(getiso)\n*/\n"

    if [[ "$1" = "pbpaste" ]]; then
        echo "${prefix}$(pbpaste)" >> $2
    else
        echo "${prefix}$1" >> $2
    fi
}

# Keygen alias
# ssh-keygen -t ed25519 -C "your_email@example.com"
# alias key.new='ssh-keygen -t ed25519 -C $(git config user.email)'
# alias key.new='gpg --full-generate-key'

# GPG key new
#

# Alias pipe to fzf
alias Z="| fzf"

# Alias list open files and send output to fzf
alias lo="lsof -i | fzf"

# Function to use rga and fzf
rga-fzf() {
	RG_PREFIX="rga --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	xdg-open "$file"
}

# Search vim cheats
# vimcheat() {
# 	RG_PREFIX="rga --files-with-matches"
# 	local file
# 	file="$(
# 		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1' ~/cheat/vim/" \
# 			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
# 				--phony -q "$1" \
# 				--bind "change:reload:$RG_PREFIX {q}" \
# 				--preview-window="70%:wrap"
# 	)" &&
# 	echo "opening $file" &&
# 	xdg-open "$file"
# }

#
# PATH
#


# # Given string
# string="Lelouch,Akame,Kakashi,Wrath"

# # Setting IFS (input field seprator) value as ","
# IFS=','

# # Reading the split string into array
# read -ra arr <<< "$string"

# # Print each value of the array by using the loop
# for val in "${arr[@]}";
# do
#   printf "name = $val\n"
# done


# exclu node modules and .git directories from the search and keep other files
# alias fzfi='rg --files --hidden --follow --no-ignore-vcs -g "!{node_modules,.git}" | fzf`'

# Example to create new key
# Create new key
# $ ssh-keygen -t ed25519 -C "your_email@example.com"
# Start ssh-agen in background
# $ eval "$(ssh-agent -s)"
# Add host to /.ssh/config
# Host *
#   AddKeysToAgent yes
#   UseKeychain no
#   IdentityFile ~/.ssh/id_ed25519
#  Add to host
# $ ssh-add ~/.ssh/id_ed25519
#

# echo "Finished dev config for shell"
#

# Terminal set to use uft8
export PYTHONIOENCODING=utf-8

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Set path for ctags
PATH=/usr/local/bin/ctags:$PATH

# Vim version
PATH=/usr/local/bin/vim:$PATH

 unset DOCKER_TLS_VERIFY
 unset DOCKER_CERT_PATH
 unset DOCKER_MACHINE_NAME
 unset DOCKER_HOST
